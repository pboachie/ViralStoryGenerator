services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - viral-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    command: redis-server --appendonly yes

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ENABLED=True
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - API_QUEUE_NAME=api_requests
      - API_RESULT_PREFIX="api_result:"
    networks:
      - viral-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env:ro

  scraper:
    build:
      context: .
      dockerfile: Dockerfile.worker
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ENABLED=True
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      # Worker-specific settings
      - REDIS_WORKER_BATCH_SIZE=5
      - REDIS_WORKER_MAX_CONCURRENT=3
    networks:
      - viral-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.7'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env:ro

  # API worker for processing API requests
  api-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ENABLED=True
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - REDIS_QUEUE_NAME=api_requests
      - REDIS_RESULT_PREFIX="api_result:"
      - REDIS_WORKER_BATCH_SIZE=3
      - REDIS_WORKER_MAX_CONCURRENT=2
    command: python -m viralStoryGenerator.src.api_worker
    networks:
      - viral-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.7'
          memory: 1G
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env:ro

networks:
  viral-network:
    driver: bridge

volumes:
  redis-data:
    driver: local