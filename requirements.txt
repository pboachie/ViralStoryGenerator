# TODO: Clarify dependency management strategy.
# Currently, `requirements.txt` and `setup.py` (install_requires) are identical and list all project dependencies.
# Service-specific files (requirements-api.txt, requirements-queue.txt, requirements-scraper.txt) are subsets of this main list,
# likely used for building lean service images.
#
# Consider the following:
# 1. `setup.py`: Define abstract dependencies (e.g., `requests>=2.30`) as the source of truth for library use.
# 2. `requirements.txt`: Use for `pip freeze > requirements.txt` to capture a reproducible development environment with exact versions.
#    This file would then NOT be identical to setup.py's install_requires.
# 3. Service-specific files: Continue to use these for lean deployments, but ensure they pull versions consistent with the overall project strategy
#    (e.g., either by also using `pip freeze` from a service-specific virtual env, or by referencing abstract versions from setup.py and resolving them at build time).
#
# Current approach (identical superset in requirements.txt/setup.py and subsets in others) is functional but can lead to maintenance overhead
# if versions need to be updated, as they must be changed in multiple places if a specific service needs a different version than the core or another service.
# However, it also ensures strict version consistency across all services if that's the primary goal.

requests==2.32.3
python-dotenv==1.0.0
crawl4ai==0.6.3
redis==5.2.1
fastapi==0.115.9
uvicorn==0.34.0
pydantic==2.11.2
python-multipart==0.0.6
aiohttp>=3.11.18
asyncio==3.4.3
prometheus-client==0.16.0
beautifulsoup4==4.12.0
lxml~=5.3.0
schedule==1.2.2
pytest==7.3.1
httpx>=0.28.1
boto3==1.37.28
azure-storage-blob==12.16.0
sentence-transformers==2.2.2
chromadb>=1.0.9
pydantic-settings==2.0.0
# torch==2.3.1
tenacity==8.2.3
mypy_boto3_s3>=1.38.0
typing-extensions>=4.13.2
